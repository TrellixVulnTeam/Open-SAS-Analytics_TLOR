{"version":3,"sources":["webpack:///../../../../src/nova-commons/src/locale/pseudoL10n/charMaps.ts","webpack:///../../../../src/nova-commons/src/locale/pseudoL10n/PseudoString.ts"],"names":["ar_pseudoCharMap","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","fr_pseudoCharMap","pl_pseudoCharMap","expMap","ignoreMap","char","indexOf","pl_xx_Strategy","prefix","suffix","map","maps","extChar","quote","locale","ratio","zh_cn_pseudo_Strategy","ar_xx_Strategy","placeholderRegex","transformString","strategy","str","length","charMap","match","hasPlaceholder","replace","result","charCount","split","reduce","accumulatedResult","ignoreFn","res2","substr","slice","len","extstr","exp","Math","floor","array","push","join","getExtension","pseudoLocalize","name","pseudoLocalizeWith","ps","toLowerCase","getStrategy"],"mappings":"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","file":"3.va-report-components.js","sourcesContent":["export const pl_pseudoCharMap = {\n  a: 'ą', // \\u0105\n  c: 'ć', // \\u0107\n  d: 'đ', // \\u0111\n  e: 'ę', // \\u0119\n  i: 'í', // \\u00ed\n  l: 'ł', // \\u0142\n  n: 'ň', // \\u0148\n  o: 'ő', // \\u0151\n  r: 'ř', // \\u0159\n  s: 'ś', // \\u015B\n  t: 'ţ', // \\u0163\n  u: 'ű', // \\u0171\n  z: 'ż', // \\u017C\n  A: 'Ą', // \\U0104\n  C: 'Ć', // \\U0106\n  D: 'Đ', // \\U0110\n  E: 'Ę', // \\U0118\n  I: 'Í', // \\U00CD\n  L: 'Ł', // \\U0141\n  N: 'Ň', // \\U0147\n  O: 'Ő', // \\U0150\n  R: 'Ř', // \\U0158\n  S: 'Ś', // \\U015A\n  T: 'Ţ', // \\U0162\n  U: 'Ű', // \\U0170\n  Z: 'Ż', // \\U017B\n};\n\n/**\n * @type {Map} Mapping table for pseudo-French\n * @ignore\n */\nexport const fr_pseudoCharMap = {\n  a: 'å', // \\u00E5\n  b: 'þ', // \\u00FE\n  c: 'ç', // \\u00E7\n  d: 'ð', // \\u00F0\n  e: 'ë', // \\u00EB\n  i: 'î', // \\u00EE\n  n: 'ñ', // \\u00F1\n  o: 'ǿ', // \\u00F8\n  u: 'ü', // \\u00FC\n  y: 'ÿ', // \\u00FD\n  A: 'Å', // \\U00C5\n  B: 'ß', // \\U00DF\n  C: 'Ç', // \\U00C7\n  D: 'Ð', // \\U00D0\n  E: 'Ë', // \\U00CB\n  I: 'Î', // \\U00CE\n  N: 'Ñ', // \\U00D1\n  O: 'Ǿ', // \\U00D8\n  U: 'Ü', // \\U00DC\n  Y: 'Ÿ', // \\U00DD\n};\n\nexport const ar_pseudoCharMap = {\n  A: 'ٯ', // \\u066F\n  B: 'إ', // \\u0625\n  C: 'ژ', // \\u0698\n  D: 'ٺ', // \\u067A\n  E: 'ٻ', // \\u067B\n  F: 'ټ', // \\u067C\n  G: 'ں', // \\u06BA\n  H: 'آ', // \\u0622\n  I: 'ک', // u06A9\n  J: 'ھ', // u06BE\n  K: 'ٹ', // u0679\n  L: 'ہ', // u06C1\n  M: 'ٽ', // u067D\n  N: 'أ', // u0623\n  O: 'گ', // u06AF\n  P: 'ے', // u06D2\n  Q: 'ٿ', // u067F\n  R: 'ج', // u062C\n  S: 'ڀ', // u0680\n  T: 'ځ', // u0681\n  U: 'پ', // u067E\n  V: 'ؤ', // u0624\n  W: 'ڂ', // u0682\n  X: 'ي', // u064A\n  Y: 'چ', // u0686\n  Z: 'ة', // u0629\n  a: 'ش', // u0634\n  b: 'ذ', // u0630\n  c: 'ز', // u0632\n  d: 'ڈ', // u0688\n  e: 'ث', // u062B\n  f: 'ب', // u0628\n  g: 'ل', // u0644\n  h: 'ا', // u0627\n  i: 'ه', // u0647\n  j: 'ت', // u062A\n  k: 'ن', // u0646\n  l: 'م', // u0645\n  m: 'ئ', // u0626\n  n: 'د', // u062F\n  o: 'خ', // u062E\n  p: 'ح', // u062D\n  q: 'ض', // u0636\n  r: 'ق', // u0642\n  s: 'س', // u0633\n  t: 'ف', // u0641\n  u: 'ع', // u0639\n  v: 'ر', // u0631\n  w: 'ص', // u0635\n  x: 'ط', // u0637\n  y: 'غ', // u063A\n  z: 'ظ', // u0638\n};\n\nexport default {\n  ar_pseudoCharMap,\n  fr_pseudoCharMap,\n  pl_pseudoCharMap,\n};\n","import maps from './charMaps';\n\n// Based on code from https://gitlab.sas.com/htmlcommons-buildtools/sas-pseudol10n4js\n\n/**\n * @type {Array} Mapping table for expansion characters\n * @ignore\n */\n// prettier-ignore\nconst expMap = [\n  0, 0, 1, 2, 3, 3, 3, 3, 4, 4,\n  4, 5, 5, 5, 6, 6, 7, 7, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 9, 9, 9, 9, 9, 9, 9, 10,\n  10, 10, 10, 10, 11, 11, 11, 11, 12, 12,\n  12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n  12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n  12, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n  13, 13, 13, 13, 14, 14, 14, 14, 14, 14,\n];\n\ntype IgnoreFnType = ((char: string) => boolean | number) | null;\n\n/**\n * @type {Map} Mapping table for characters to ignore\n * @ignore\n */\nconst ignoreMap: {\n  [char: string]: IgnoreFnType;\n} = {\n  // html\n  '<': (char: string) => char === '>',\n  // html\n  '{': (char: string) => char === '}',\n  // macro function\n  '%': (char: string) => ~[' ', ',', ':', ';', '?', '!', ')', '}', ']'].indexOf(char),\n  // macro variable, html entities\n  '&': (char: string) => ~[' ', ';'].indexOf(char),\n};\n\ninterface Strategy {\n  prefix: string;\n  suffix: string;\n  map: {\n    [char: string]: string;\n  } | null;\n  extChar: string;\n  quote: string;\n  locale: string;\n  ratio: number;\n}\n\n/**\n * @type {Map} Mapping table for strategies to pseudo-translate\n * @ignore\n */\nconst pl_xx_Strategy: Strategy = {\n  prefix: '[',\n  suffix: ']',\n  map: maps.pl_pseudoCharMap,\n  extChar: '@',\n  quote: \"'\",\n  locale: 'pl_XX',\n  ratio: 1,\n};\nconst zh_cn_pseudo_Strategy: Strategy = {\n  prefix: 'Ｘ',\n  suffix: 'Ｚ',\n  map: null,\n  extChar: '补',\n  quote: \"'\",\n  locale: 'zh_CN_pseudo',\n  ratio: 1.25,\n};\nconst ar_xx_Strategy: Strategy = {\n  prefix: '',\n  suffix: '',\n  map: maps.ar_pseudoCharMap,\n  extChar: '',\n  quote: '',\n  locale: 'ar_XX',\n  ratio: 1,\n};\n\n/**\n * Returns the strategies options table\n *\n * @param {string} strategy\n * @return {object}\n */\nexport const getStrategy = (strategy: string): Strategy => {\n  strategy = strategy.toLowerCase();\n  let ps;\n  switch (strategy) {\n    case 'pl-xx':\n      ps = pl_xx_Strategy;\n      break;\n    case 'zh-cn-pseudo':\n      ps = zh_cn_pseudo_Strategy;\n      break;\n    case 'ar-xx':\n      ps = ar_xx_Strategy;\n      break;\n    default:\n      ps = pl_xx_Strategy;\n      break;\n  }\n  return ps;\n};\n\nconst placeholderRegex = /\\{[A-Za-z0-9_]+}/g;\n/**\n * Indicates if a message contains placeholder\n *\n * @param {String} strategy\n * @return {boolean}\n */\nconst hasPlaceholder = (str: string) => {\n  return str.match(placeholderRegex);\n};\n\n/**\n * Returns the expansion string\n *\n * @return {String}\n */\nconst getExtension = function(len: number, ratio: number, extChar: string, locale: string) {\n  let i: number;\n  let extstr = '';\n  let exp = len <= expMap.length ? expMap[len] : len * 0.15;\n  exp = Math.floor(exp / ratio);\n  if (exp === 0 || extChar.length === 0) return extstr;\n  if (locale === 'zh_CN_pseudo') {\n    for (i = 0; i < exp; i++) {\n      if (i > 0 && i % 7 === 0) extstr += ' ';\n      else extstr += extChar;\n    }\n  } else {\n    const array = [];\n    for (i = 0; i < exp; i++) {\n      array.push(extChar);\n    }\n    for (i = 6; i < exp; i += 7) {\n      array[i] = ' ';\n    }\n    extstr = array.join('');\n  }\n  return extstr;\n};\n\n/**\n * Returns the transcoded string according to the mapping table\n *\n * @param {Strategy} strategy\n * @param {string} str\n * @return {string}\n */\nconst transformString = (strategy: Strategy, str: string) => {\n  if (!str || str.length === 0) {\n    return str;\n  }\n  const charMap = strategy.map;\n  const quote = hasPlaceholder(str) ? strategy.quote + strategy.quote : strategy.quote;\n\n  const transformReducer = (\n    accumulatedResult: { ignoreFn: IgnoreFnType; result: string; charCount: number },\n    char: string\n  ) => {\n    let { ignoreFn, result, charCount } = accumulatedResult;\n    // if we can stop ignoring\n    if (ignoreFn && ignoreFn(char)) {\n      ignoreFn = null;\n    }\n    if (!ignoreFn) {\n      // if we need to start ignoring\n      ignoreFn = ignoreMap[char];\n      if (!ignoreFn) {\n        charCount += 1;\n        if (charMap !== null && charMap[char]) {\n          // console.log(`replacing ${char} with ${charMap[char]}`);\n          char = charMap[char];\n        }\n      } else {\n        charCount -= 1;\n      }\n    }\n    result += char;\n    return { ignoreFn, result, charCount };\n  };\n\n  // replace escaped characters: \\\\n \\\\t \\\\r \\\\uXXXX\n  str = str.replace(/\\\\[nrt]|\\\\u([0-9A-Fa-f]{4})/g, '%$&!');\n  const { result, charCount } = str\n    .split('')\n    .reduce(transformReducer, { ignoreFn: null as IgnoreFnType, result: '', charCount: 0 });\n  // put escaped character back in the string\n  const res2 = result.replace(/\\%(\\\\[nrt]|\\\\u([0-9A-Fa-f]{4}))\\!/g, (match) => {\n    return match.substr(1).slice(0, -1);\n  });\n  const res =\n    strategy.prefix +\n    res2 +\n    quote +\n    getExtension(charCount, strategy.ratio, strategy.extChar, strategy.locale) +\n    strategy.suffix;\n  return res;\n};\n\n/**\n * Pseudo-localize a string using a given strategy\n *\n * @param {string} strategy\n * @return {string}\n */\nconst pseudoLocalizeWith = (strategy: Strategy, str: string) => {\n  const result = transformString(strategy, str);\n  return result;\n};\n\n/**\n * Pseudo-localize a string for the locale\n *\n * @param {string} name Name of locale\n * @param {string} str The string to pseudo-localize\n * @return {string}\n */\nexport const pseudoLocalize = (name: string, str: string) => {\n  if (str.length < 1) return str;\n  const strategy = getStrategy(name);\n  return pseudoLocalizeWith(strategy, str);\n};\n"],"sourceRoot":""}